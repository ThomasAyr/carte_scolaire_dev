import streamlit as st
import pandas as pd
import requests
import folium
import plotly.graph_objects as go
from streamlit_folium import folium_static

# Configuration de la page
st.set_page_config(
    page_title="Carte scolaire Occitanie",
    page_icon="üè´",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "Carte Scolaire Occitanie",
        'Get Help': 'https://github.com/ThomasAyr/carte_scolaire_dev',
    }
)

with st.sidebar:
    st.image("graphics composents/school-map-logo-text.svg", width=250)
    st.markdown("---")

# Style CSS
st.markdown("""
    <style>    
    /* Style gris */
    p, h1, h2, h3, ul, li .contact-item, .etablissement-info, .main h1, .main h2, .main h3, .main h4, .main p, .main label, .main div {
        color: #4F4F4F !important;
    }
            
    button div p {
            color: white !important;
    }

    /* Style des cartes √©tablissements */
    .result-card {
        background-color: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        border: 1px solid #e0e0e0;
    }
    
    /* Style des badges caract√©ristiques */
    .badge-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 1rem;
        justify-content: flex-start;
    }
            
    [data-testid="stSidebarNav"] {
        visibility: hidden;
        display:none;
    }
    
    .badge {
        color: #4F4F4F;
        flex: 0 0 auto;
        background-color: #f8f9fa;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        border: 1px solid #dee2e6;
        font-size: 0.9rem;
        transition: all 0.2s ease;
        white-space: nowrap;
    }
    
    .badge:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background-color: #e9ecef;
    }
    
    /* Style des informations de contact */
    .contact-info {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 1rem 0;
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
    }
    
    .contact-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
    }
    
    .contact-item a {
        color: #0066cc;
        text-decoration: none;
    }
    
    .contact-item a:hover {
        text-decoration: underline;
        color: #004494;
    }
    
    /* Style des infos √©tablissement */
    .etablissement-info {
        margin-top: 1rem;
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
    }

    /* Ajustements suppl√©mentaires */
    .stApp {
        background-color: white;
        color: #4F4F4F !important;
    }

    .stSidebar {
        background-color: #262730;
    }

    .stSelectbox {
        color: white !important;
    }
    
    /* Style pour les messages d'info et warning */
    .stAlert > div {
        color: #4F4F4F !important;
    }
    </style>
""", unsafe_allow_html=True)

# Dictionnaire des emojis pour les caract√©ristiques
CARACTERISTIQUES_EMOJI = {
    'restauration': 'üçΩÔ∏è Restauration',
    'hebergement': 'üõèÔ∏è Internat',
    'ulis': '‚ôø ULIS',
    'apprentissage': 'üìö Apprentissage',
    'segpa': 'üìñ SEGPA',
    'section_arts': 'üé® Section Arts',
    'section_cinema': 'üé¨ Section Cin√©ma',
    'section_theatre': 'üé≠ Section Th√©√¢tre',
    'section_sport': '‚öΩ Section Sport',
    'section_internationale': 'üåç Section Internationale',
    'section_europeenne': 'üá™üá∫ Section Europ√©enne',
    'lycee_agricole': 'üåæ Lyc√©e Agricole',
    'lycee_militaire': 'üéñÔ∏è Lyc√©e Militaire',
    'lycee_des_metiers': 'üîß Lyc√©e des M√©tiers',
    'post_bac': 'üéì Post-BAC'
}

def load_data():
    try:
        df = pd.read_csv('datasets/data_carte_scolaire_nettoye.csv')
        df['ville_recherche'] = df['com_name_upper'].astype(str) + ' (' + df['libelle_departement_eleve'].astype(str) + ')'
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier : {str(e)}")
        return None

def get_etablissements_api(codes_rne):
    """R√©cup√®re les informations d√©taill√©es des √©tablissements via l'API"""
    """√Ä un quota tr√®s restent de requ√™tes, il est pr√©f√©rable de ne pas utiliser cette fonction et d'utiliser la suivante"""
    if not codes_rne:
        return None
    
    where_clause = " OR ".join([f'identifiant_de_l_etablissement = "{code}"' for code in codes_rne])
    url = "https://data.occitanie.education.gouv.fr/api/explore/v2.1/catalog/datasets/fr-en-annuaire-education/api"
    params = {
        "where": where_clause,
        "limit": 20
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es : {str(e)}")
        return None
    
def get_etablissements_api(codes_rne):
    """R√©cup√®re les informations d√©taill√©es des √©tablissements via l'API"""
    retour = []
    for code in codes_rne:
        try:
            url = f"https://data.occitanie.education.gouv.fr/api/explore/v2.1/catalog/datasets/fr-en-annuaire-education/records"
            params = {
                "limit": 20,
                "refine": f"identifiant_de_l_etablissement:{code}"
            }
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            if data["results"]:  # V√©rifier si des r√©sultats existent
                retour.extend(data["results"])  # Ajouter directement le r√©sultat sans le wrapper dans une liste
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration des donn√©es pour {code}: {str(e)}")
            continue
    
    return {
        "total_count": len(retour),  # Nombre r√©el d'√©tablissements trouv√©s
        "results": retour
    }  

def get_coordinates(code_insee, type_et_libelle, com_name_upper):
    """
    R√©cup√®re les coordonn√©es √† partir des informations de l'adresse
    
    Args:
        code_insee (str): Code INSEE de la commune
        type_et_libelle (str): Libell√© de la voie
        com_name_upper (str): Nom de la commune en majuscules
    
    Returns:
        tuple: (longitude, latitude) ou None si non trouv√©
    """
    try:
        # Construction de l'URL en fonction de la pr√©sence de type_et_libelle
        base_url = "https://api-adresse.data.gouv.fr/search/"
        
        if type_et_libelle:
            params = {
                'q': type_et_libelle,
                'type': 'street',
                'citycode': int(code_insee)
            }
        else:
            params = {
                'q': com_name_upper
            }
        
        # Appel √† l'API
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        data = response.json()
        
        # V√©rification et extraction des coordonn√©es
        if data.get('features') and len(data['features']) > 0:
            coordinates = data['features'][0]['geometry']['coordinates']
            return [coordinates[1], coordinates[0]]
        
        return None
        
    except Exception as e:
        print(f"Erreur lors de la g√©olocalisation : {str(e)}")
        return None

def create_map(etablissements, code_insee, type_et_libelle, com_name_upper):
    coord_ville = get_coordinates(code_insee, type_et_libelle, com_name_upper)
    lats, lons = [], []
    if coord_ville != None:
        lats += [float(coord_ville[0])]
        lons += [float(coord_ville[1])]
    if etablissements:
        # Calculer le centre moyen de tous les √©tablissements
        lats += [float(etab['latitude']) for etab in etablissements if 'latitude' in etab]
        lons += [float(etab['longitude']) for etab in etablissements if 'longitude' in etab]
        center = [sum(lats) / len(lats), sum(lons) / len(lons)]
        zoom_start = 11
    else:
        center = [43.6, 3.8]
        zoom_start = 12
    
    m = folium.Map(location=center, zoom_start=zoom_start)
    
    # Ajouter les marqueurs avec des couleurs diff√©rentes
    for etab in etablissements:
        if 'latitude' in etab and 'longitude' in etab:
            if etab['nom_etablissement'].startswith('Lyc√©e'):
                icon_color = 'red'
            elif etab['nom_etablissement'].startswith('Coll√®ge'):
                icon_color = 'blue'
            else:
                icon_color = 'gray'
            
            folium.Marker(
                [etab['latitude'], etab['longitude']],
                popup=f"<strong>{etab['nom_etablissement']}</strong><br>{etab['adresse_1']}",
                tooltip=etab['nom_etablissement'],
                icon=folium.Icon(color=icon_color, icon='info-sign')
            ).add_to(m)
    if coord_ville != None:
        if type_et_libelle != None:
            survol = type_et_libelle
        else:
            survol = com_name_upper
            type_et_libelle = ""
        folium.Marker(
            coord_ville,
            popup=f"<strong>{com_name_upper}</strong><br>{type_et_libelle}",
            tooltip=survol,
            icon=folium.Icon(color='green', icon='home')
        ).add_to(m)
    
    if etablissements:
        m.fit_bounds([[min(lats), min(lons)], [max(lats), max(lons)]], padding=[50, 50])
    return m

def afficher_etablissement(etab):
    # Cr√©er le HTML pour les badges au d√©but
    badges_html = [f'<span class="badge">üë• <strong>Effectif :</strong> {etab["nombre_d_eleves"] if etab["nombre_d_eleves"] else "Non renseign√©"}</span>']
    
    # Ajouter les badges pour les caract√©ristiques
    for key, emoji_label in CARACTERISTIQUES_EMOJI.items():
        if etab.get(key, "0") == "1" or etab.get(key, 0) == 1:
            badges_html.append(f'<span class="badge">{emoji_label}</span>')
    
    # Jointure de tous les badges
    badges = ''.join(badges_html)
    
    html = f"""
    <div class="result-card">
        <h3>{etab['nom_etablissement']} ({etab['type_etablissement']})</h3>
        <div class="contact-item">
            üìç {etab['adresse_1']}, {etab['code_postal']} {etab['nom_commune']}
        </div>
        <div class="contact-item">
            üìû <a href="tel:{etab['telephone']}">{etab['telephone']}</a>
        </div>
        <div class="contact-item">
            ‚úâÔ∏è <a href="mailto:{etab['mail']}">{etab['mail']}</a>
        </div>
        <div class="contact-item">
            üîó <a href="{etab['web']}" target="_blank">{etab['web']}</a>
        </div>
        <div class="badge-container">
            {badges}
        </div>
    </div>
    """
    
    st.markdown(html, unsafe_allow_html=True)

def search_page():
    st.title("üè´ Recherchez de l'√©tablissement scolaire de votre secteur")
    
    df = load_data()
    if df is None:
        return
    
    # Ajout d'une valeur par d√©faut pour la ville
    villes_disponibles = ['S√©lectionnez une ville'] + sorted([str(ville) for ville in df['ville_recherche'].unique()])
    ville_selectionnee = st.selectbox(
        "Rechercher une ville",
        options=villes_disponibles,
        index=0,
        key="ville_search"
    )
    
    # Ne continue que si une vraie ville est s√©lectionn√©e
    if ville_selectionnee != 'S√©lectionnez une ville':
        etablissements = df[df['ville_recherche'] == ville_selectionnee]
        
        # Gestion du type d'√©tablissement
        types_disponibles = etablissements['type_et_libelle'].dropna().unique()
        type_choisi = None
        
        if len(types_disponibles) > 1:
            types_options = ['S√©lectionnez une voie'] + list(types_disponibles)
            type_choisi = st.selectbox(
                "S√©lectionnez une voie",
                options=types_options,
                index=0
            )
            
            # Ne filtre que si un vrai type est s√©lectionn√©
            if type_choisi != 'S√©lectionnez une voie':
                etablissements = etablissements[etablissements['type_et_libelle'] == type_choisi]
            else:
                return  # Arr√™te ici si aucun type n'est s√©lectionn√©
        
        # Gestion du num√©ro de voie
        if (etablissements['no_de_voie_debut'].notna().any() and 
            len(etablissements[['no_de_voie_debut', 'no_de_voie_fin']].drop_duplicates()) > 1):
            
            st.info("Veuillez saisir un num√©ro de voie")
            min_voie = int(etablissements['no_de_voie_debut'].min())
            max_voie = int(etablissements['no_de_voie_fin'].max())
            
            numero = st.number_input(
                "Num√©ro de voie",
                min_value=min_voie,
                max_value=max_voie,
                value=min_voie,
                step=1,
                help=f"Le num√©ro doit √™tre compris entre {min_voie} et {max_voie}"
            )
            
            if numero % 2 == 0 : #numero_pair 
                    etablissements = etablissements[
                    (etablissements['no_de_voie_debut'].fillna(-1) <= numero) &
                    (etablissements['no_de_voie_fin'].fillna(float('inf')) >= numero) &
                    ((etablissements['parite']== "PI") | (etablissements['parite']== "P"))
                ]
            else :# numero_impair
                etablissements = etablissements[
                    (etablissements['no_de_voie_debut'].fillna(-1) <= numero) &
                    (etablissements['no_de_voie_fin'].fillna(float('inf')) >= numero)&
                    ((etablissements['parite']== "PI") | (etablissements['parite']== "I"))
                ]
            
        # Affichage des r√©sultats
        if len(etablissements) > 0:
            nb_colleges = len(etablissements[etablissements['type_etablissement'] == "COLLEGE"])
            nb_lycees = len(etablissements[etablissements['type_etablissement'] == "LYCEE"])
            
            result_text = []
            if nb_colleges > 0:
                result_text.append(f"{nb_colleges} coll√®ge{'s' if nb_colleges > 1 else ''}")
            if nb_lycees > 0:
                result_text.append(f"{nb_lycees} lyc√©e{'s' if nb_lycees > 1 else ''}")
            
            if result_text:  # N'affiche que s'il y a des r√©sultats
                st.subheader("R√©sultats de la recherche")
                st.write(" et ".join(result_text) + " trouv√©" + ("s" if nb_colleges + nb_lycees > 1 else ""))
                
                codes_rne = etablissements['code_rne'].tolist()
                api_data = get_etablissements_api(codes_rne)
                
                if api_data and 'results' in api_data:
                    st.subheader("Localisation des √©tablissements")
                    map = create_map(api_data['results'], etablissements['code_insee'].tolist()[0], type_choisi, ville_selectionnee)
                    print(etablissements['code_insee'].tolist()[0], type_choisi, ville_selectionnee)
                    folium_static(map)
                    
                    for etab in api_data['results']:
                        afficher_etablissement(etab)
        else:
            st.warning("Aucun √©tablissement trouv√© avec ces crit√®res")
            
def about_page():
    st.title("√Ä propos")
    st.markdown("""
    Cette application permet de rechercher des √©tablissements scolaires en Occitanie.
    
    Cette architecture permet de fournir aux utilisateurs un outil complet pour :
    - Identifier le(s) √©tablissement(s) de secteur des √©l√®ves d'Occitanie
    - Acc√©der aux informations d√©taill√©es de ces √©tablissements
    - Visualiser leur localisation sur une carte interactive
    - Visualiser les manques de donn√©es et la politique √©ducative de la r√©gion

    Notre application combine trois sources de donn√©es, d√©crites ci-apr√®s, pour fournir un service complet √† ses usagers.
    """)
    
    st.title("Sources de donn√©es")
    st.header("1. Carte scolaire des √©tablissements publics d'Occitanie")

    st.subheader("Source principale")
    st.markdown("""
        - **Jeu de donn√©es** : Carte scolaire des coll√®ges, lyc√©es publics de la r√©gion Occitanie Rentr√©e 2024
        - **Fournisseur** : R√©gion acad√©mique Occitanie
        """)
    st.markdown("[Acc√©der aux donn√©es](https://data.occitanie.education.gouv.fr/explore/dataset/fr-en-occitanie-carte-scolaire-des-colleges-lycees-publics/)")

    st.markdown("""
    Ce jeu de donn√©es est fondamental pour notre application car il contient la sectorisation 
    compl√®te des √©tablissements scolaires en Occitanie. Il r√©sulte de l'agr√©gation des 13 fichiers 
    d√©partementaux utilis√©s par les DSDEN (Directions des Services D√©partementaux de l'√âducation 
    Nationale) pour d√©terminer automatiquement le ou les √©tablissements de secteur des √©l√®ves.
    """)

    st.subheader("Contexte r√©glementaire")
    st.markdown("""
    La sectorisation des √©tablissements publics est r√©gie par diff√©rentes autorit√©s :
    - Pour les **coll√®ges** : Le conseil d√©partemental d√©finit les secteurs de recrutement, 
      pouvant inclure des "secteurs multi-coll√®ges" pour favoriser la mixit√© sociale.
    - Pour les **lyc√©es** : Le conseil r√©gional, en collaboration avec l'autorit√© acad√©mique, 
      d√©finit les districts de recrutement en consid√©rant les crit√®res d√©mographiques, 
      √©conomiques et sociaux.
    """)

    st.header("2. Annuaire de l'√©ducation")

    st.subheader("Source des donn√©es d√©taill√©es")
    st.markdown("""
        - **API** : Annuaire de l'√©ducation
        - **Usage** : Enrichissement des informations √©tablissements
        """)
    st.markdown("[Acc√©der √† l'API](https://data.occitanie.education.gouv.fr/explore/dataset/fr-en-annuaire-education/)")

    st.markdown("""
    Cette API nous permet d'enrichir notre application avec des informations d√©taill√©es 
    sur chaque √©tablissement :
    - Coordonn√©es compl√®tes
    - Services disponibles (restauration, internat...)
    - Options et sections sp√©ciales
    - Contacts et informations pratiques
    """)

    st.header("3. Base Adresse Nationale (BAN)")

    st.subheader("Source de g√©ocodage")
    st.markdown("""
        - **API** : API Adresse (Base Adresse Nationale)
        - **Usage** : G√©ocodage des adresses
        """)
    st.markdown("[Acc√©der √† l'API](https://api.gouv.fr/les-api/base-adresse-nationale)")

    st.markdown("""
    La BAN est utilis√©e pour :
    - Convertir les adresses en coordonn√©es g√©ographiques
    - Permettre la visualisation cartographique
    """)

def legal_page():
    st.title("Mentions l√©gales")

    st.markdown("""
    ### √âditeur
    Cette application est √©dit√©e dans le cadre d'un projet √©tudiant pour la formation M2 MIASHS √† l'Universit√© Paul-Val√©ry Montpellier 3 par Thomas Ayrivi√©.

    ### H√©bergement
    Application h√©berg√©e sur Streamlit Cloud
    San Francisco, CA 94107
    United States.

    ### Donn√©es personnelles
    Cette application n'effectue aucune collecte de donn√©es personnelles.
    Les donn√©es affich√©es sont issues de sources publiques (open data) fournies par la R√©gion acad√©mique Occitanie et la BAN - Base des adresses nationales. Voir la section √Ä propos pour plus d'informations.

    ### Cookies
    Cette application n'utilise pas de cookies.

    ### Propri√©t√© intellectuelle
    Le [code source](https://github.com/ThomasAyr/carte_scolaire_dev) de cette application est soumis √† la licence MIT.
    Les donn√©es utilis√©es sont sous licence ouverte.                 

    ### Contact
    Pour toute question concernant l'application :
    - Email : [thomas.ayrivie@etu.univ-montp3.fr](mailto:thomas.ayrivie@etu.univ-montp3.fr)
    - Formation MIASHS de l'UFR 6, Universit√© Paul-Val√©ry Montpellier 3, Route de Mende, 34199 Montpellier Cedex 5
    """)

    st.info('NB : Ces mentions l√©gales sont fournies √† titre indicatif dans le cadre d\'un projet √©tudiant.')

def get_population_data():
    """Donn√©es de population par d√©partement (2020) SOURCE INSEE"""
    return {
        'ARIEGE': 153287,
        'AUDE': 370260,
        'AVEYRON': 279595,
        'GARD': 748437,
        'HAUTE-GARONNE': 1400039,
        'GERS': 191283,
        'HERAULT': 1175623,
        'LOT': 174208,
        'LOZERE': 76601,
        'HAUTES-PYRENEES': 229567,
        'PYRENEES-ORIENTALES': 479000,
        'TARN': 387890,
        'TARN-ET-GARONNE': 259124
    }

def stats_page():
    # Configuration du style
    st.markdown("""
        <style>
        .big-font {
            font-size:20px !important;
            color: #4F4F4F !important;
        }
        .plotly-title {
            font-size:24px !important;
            color: #4F4F4F !important;
        }
        .filter-container {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        div[data-testid="stMetricValue"] {
            color: #4F4F4F !important;
        }
        </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<h1 style="color: #4F4F4F;">üìä Tableau de bord sur la carte scolaire des coll√®ges et lyc√©es publics</h1>', unsafe_allow_html=True)

    # Chargement des donn√©es
    df = load_data()
    if df is None:
        st.error("Impossible de charger les donn√©es")
        return

    # Conversion explicite des colonnes en string et nettoyage
    df['type_etablissement'] = df['type_etablissement'].fillna('').astype(str)
    df['libelle_departement_eleve'] = df['libelle_departement_eleve'].fillna('').astype(str)

    # Configuration des filtres
    with st.container():
        st.markdown('<div class="filter-container">', unsafe_allow_html=True)
        col_dept, col_type = st.columns(2)

        with col_dept:
            # Filtrage des valeurs vides pour les d√©partements
            dept_list = [d for d in df['libelle_departement_eleve'].unique() if d.strip()]
            all_departments = sorted(dept_list)
            selected_departments = st.multiselect(
                "S√©lectionner un ou plusieurs d√©partements",
                options=all_departments,
                default=all_departments,
                key="department_filter"
            )

        with col_type:
            # Filtrage des valeurs vides pour les types
            type_list = [t for t in df['type_etablissement'].unique() if t.strip()]
            all_types = ['Tous'] + sorted(type_list)
            selected_type = st.selectbox(
                "S√©lectionnez le type d'√©tablissement",
                options=all_types,
                index=0,
                key="type_filter"
            )
        st.markdown('</div>', unsafe_allow_html=True)

    # Filtrage des donn√©es
    filtered_df = df.copy()
    if selected_departments:
        filtered_df = filtered_df[filtered_df['libelle_departement_eleve'].isin(selected_departments)]
    if selected_type != 'Tous':
        filtered_df = filtered_df[filtered_df['type_etablissement'] == selected_type]

    # Configuration des couleurs
    colors = {
        'COLLEGE': '#1f77b4',
        'LYCEE': '#ff7f0e',
        'background': '#ffffff',
        'text': '#4F4F4F'
    }

    # M√©triques principales
    st.markdown('<p class="big-font">Chiffres cl√©s</p>', unsafe_allow_html=True)
    col_stats1, col_stats2, col_stats3 = st.columns(3)
    
    with col_stats1:
        st.metric(
            label="Total √©tablissements",
            value=f"{len(filtered_df['code_rne'].unique()):,}"
        )
    with col_stats2:
        st.metric(
            label="Coll√®ges",
            value=f"{len(filtered_df[filtered_df['type_etablissement'] == 'COLLEGE']['code_rne'].unique()):,}"
        )
    with col_stats3:
        st.metric(
            label="Lyc√©es",
            value=f"{len(filtered_df[filtered_df['type_etablissement'] == 'LYCEE']['code_rne'].unique()):,}"
        )

    # Graphiques
    col1, col2 = st.columns(2)
    populations = get_population_data()

    with col1:
        # R√©partition par d√©partement avec code_rne unique
        dept_count = filtered_df.groupby(['libelle_departement_eleve', 'type_etablissement'])['code_rne'].nunique().unstack(fill_value=0)
        fig_dept = go.Figure(data=[
            go.Bar(name='Coll√®ges', x=dept_count.index, y=dept_count.get('COLLEGE', [0]*len(dept_count)), marker_color=colors['COLLEGE']),
            go.Bar(name='Lyc√©es', x=dept_count.index, y=dept_count.get('LYCEE', [0]*len(dept_count)), marker_color=colors['LYCEE'])
        ])
        
        fig_dept.update_layout(
            title={'text': "√âtablissements par d√©partement", 'font': {'size': 24, 'color': colors['text']}},
            barmode='group',
            xaxis={'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 14, 'color': colors['text']}, 'tickangle': 45},
            yaxis={'title': {'text': "Nombre d'√©tablissements", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 14, 'color': colors['text']}},
            paper_bgcolor=colors['background'],
            plot_bgcolor=colors['background'],
            font={'color': colors['text']},
            height=500
        )
        st.plotly_chart(fig_dept, use_container_width=True)

    with col2:
        # Ratio √©tablissements/population
        dept_ratio = {}
        populations = get_population_data()

        # Standardisation des noms de d√©partements pour la correspondance
        standardized_populations = {
            name.upper(): value for name, value in populations.items()
        }

        for dept in selected_departments:
            dept_clean = dept.strip()
            dept_name = dept_clean.split(' (')[0] if ' (' in dept_clean else dept_clean
            
            if dept_name in standardized_populations:
                # Compte unique des √©tablissements par code_rne
                count = filtered_df[filtered_df['libelle_departement_eleve'] == dept]['code_rne'].nunique()
                dept_ratio[dept_name] = (count / standardized_populations[dept_name]) * 100000

        if dept_ratio:  # V√©rifie si on a des donn√©es √† afficher
            fig_ratio = go.Figure(data=[
                go.Bar(
                    x=list(dept_ratio.keys()),
                    y=list(dept_ratio.values()),
                    marker_color=colors['COLLEGE'],
                    text=[f"{val:.1f}" for val in dept_ratio.values()],  # Ajoute les valeurs sur les barres
                    textposition='outside'
                )
            ])
            fig_ratio.update_layout(
                title={'text': "√âtablissements pour 100K habitants", 'font': {'size': 24, 'color': colors['text']}},
                xaxis={'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                    'tickfont': {'size': 14, 'color': colors['text']}, 'tickangle': 45},
                yaxis={'title': {'text': "Ratio pour 100k habitants", 'font': {'size': 18, 'color': colors['text']}},
                    'tickfont': {'size': 14, 'color': colors['text']}},
                paper_bgcolor=colors['background'],
                plot_bgcolor=colors['background'],
                font={'color': colors['text']},
                height=500,
                showlegend=False
            )
            st.plotly_chart(fig_ratio, use_container_width=True)
        else:
            st.warning("Pas de donn√©es disponibles pour le calcul du ratio")


    # M√©triques sectorisation unique
    st.markdown("<p class='big-font'>Chiffres sur la sectorisation unique</p><span>La sectorisation unique signifie que toute une ville est sectoris√©e dans les m√™mes √©tablissements, il n'y a donc pas de granularit√© par adresse.</span><br>", unsafe_allow_html=True)
    col_stats12, col_stats22, col_stats32 = st.columns(3)
    
    
    with col_stats12:
        st.metric(
            label="Nombre de villes",
            value=f"{len(filtered_df['com_name_upper'].unique())}"
        )
    with col_stats22:
        villes_unique = (
            filtered_df.groupby('com_name_upper')
            .agg({'type_et_libelle': lambda x: x.isna().all()})
            ['type_et_libelle']
            .value_counts()
            .get(True, 0)
        )
        st.metric(
            label="Sectorisation coll√®ge/lyc√©e unique",
            value=f"{villes_unique}"
        )
    with col_stats32:
        villes_unique = (
            filtered_df[filtered_df['type_etablissement']=='COLLEGE'].groupby('com_name_upper')
            .agg({'type_et_libelle': lambda x: x.isna().all()})
            ['type_et_libelle']
            .value_counts()
            .get(True, 0)
        )
        st.metric(
            label="Sectorisation coll√®ge unique",
            value=f"{villes_unique}"
        )

 
        # Pr√©paration des donn√©es avec la liste des villes
        dept_ville_details = (
            filtered_df[filtered_df['type_et_libelle'].notnull()]
            .groupby('libelle_departement_eleve')['com_name_upper']
            .agg(list)  # Collecte toutes les villes par d√©partement
            .reset_index()
        )

    ### Graphique sectorisation unique ########################################
    # Fonction pour formater la liste des villes
    def format_ville_list(villes):
        villes_uniques = sorted(list(set(villes)))
        
        def format_line(text, max_length=50):
            if len(text) <= max_length:
                return text
            
            last_space = text[:max_length].rfind(' ')
            if last_space == -1:  # Si pas d'espace trouv√©
                return text[:max_length] + "<br>" + format_line(text[max_length:])
            return text[:last_space] + "<br>" + format_line(text[last_space+1:])

        # Formater la liste des villes
        if len(villes_uniques) > 10:
            ville_list = f"Villes: {', '.join(villes_uniques[:10])}..."
        else:
            ville_list = f"Villes: {', '.join(villes_uniques)}"
        return format_line(ville_list)

    # Cr√©ation du graphique avec texte personnalis√© au survol
    fig_sectorisation = go.Figure(data=[
        go.Bar(
            x=dept_ville_details['libelle_departement_eleve'],
            y=[len(set(villes)) for villes in dept_ville_details['com_name_upper']],
            marker_color=colors['COLLEGE'],
            hovertemplate="<b>%{x}</b><br>" +
                        "Nombre de villes: %{y}<br>" +
                        "%{customdata}<extra></extra>",
            customdata=[format_ville_list(villes) for villes in dept_ville_details['com_name_upper']]
        )
    ])

    # Mise en page du graphique
    fig_sectorisation.update_layout(
        title={
            'text': "Nombre de villes avec sectorisations multiples par d√©partement", 
            'font': {'size': 24, 'color': colors['text']}
        },
        xaxis={
            'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
            'tickfont': {'size': 14, 'color': colors['text']}, 
            'tickangle': 45
        },
        yaxis={
            'title': {'text': "Nombre de villes", 'font': {'size': 18, 'color': colors['text']}},
            'tickfont': {'size': 14, 'color': colors['text']}
        },
        paper_bgcolor=colors['background'],
        plot_bgcolor=colors['background'],
        font={'color': colors['text']},
        height=500,
        showlegend=False,
        hoverlabel=dict(
            bgcolor=colors['text'],
            font_size=14,
            font_family="Arial"
        )
    )
    st.plotly_chart(fig_sectorisation, use_container_width=True)
    st.markdown("<span>Les sectorisations multiples sont mises en place pour favoriser l'inclusion sociale.</span><br>", unsafe_allow_html=True)
    

    # M√©triques donn√©es manquantes
    st.markdown("<p class='big-font'>Chiffres sur les donn√©es manquantes</p><span>", unsafe_allow_html=True)
    col_stats13, col_stats23 = st.columns(2)
    
    with col_stats13:
        villes_college = set(filtered_df[(filtered_df['type_etablissement']=='COLLEGE') & ('libelle_region' != 'HORS REGION')]['com_name_upper'].unique())
        villes_lycee = set(filtered_df[(filtered_df['type_etablissement']=='LYCEE') & ('libelle_region' != 'HORS REGION')]['com_name_upper'].unique())
        villes_college_only = villes_college - villes_lycee
        villes_lycee_only = villes_lycee - villes_college
        
        st.metric(
            label="Villes manquantes dans la carte des lyc√©es",
            value=f"{len(villes_college_only)}"
        )
        
        st.metric(
            label="Villes manquantes dans la carte des coll√®ges",
            value=f"{len(villes_lycee_only)}"
        )
    with col_stats23:
        adressevilles_college = set(map(tuple, 
            filtered_df[
                (filtered_df['type_etablissement']=='COLLEGE') & 
                (filtered_df['libelle_region'] != 'HORS REGION')
            ][['com_name_upper', 'type_et_libelle']].values
        ))
        adressevilles_lycee = set(map(tuple, 
            filtered_df[
                (filtered_df['type_etablissement']=='LYCEE') & 
                (filtered_df['libelle_region'] != 'HORS REGION')
            ][['com_name_upper', 'type_et_libelle']].values
        ))
        adressevilles_college_only = adressevilles_college - adressevilles_lycee - villes_lycee_only
        adressevilles_lycee_only = adressevilles_lycee - adressevilles_college - villes_college_only
        
        st.metric(
            label="Adresses manquantes dans la carte des lyc√©es",
            value=f"{len(adressevilles_college_only)}" 
        )
        st.metric(
            label="Adresses manquantes dans la carte des coll√®ges",
            value=f"{len(adressevilles_lycee_only)}" 
        )

    # Fonction pour regrouper par d√©partement
    @st.cache_data
    def group_by_dept(data_set):
        dept_counts = {}
        for item in data_set:
            ville = item[0] if isinstance(item, tuple) else item
            dept = filtered_df[filtered_df['com_name_upper'] == ville]['libelle_departement_eleve'].iloc[0]
            dept_counts[dept] = dept_counts.get(dept, 0) + 1
        return dept_counts

    villes_missing_lycees = group_by_dept(villes_college_only)
    villes_missing_colleges = group_by_dept(villes_lycee_only)
    addr_missing_lycees = group_by_dept(adressevilles_college_only)
    addr_missing_colleges = group_by_dept(adressevilles_lycee_only)

    # Cr√©ation des 4 graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique 1: Villes manquantes dans la carte des lyc√©es
        fig1 = go.Figure(data=[
            go.Bar(
                x=list(villes_missing_lycees.keys()),
                y=list(villes_missing_lycees.values()),
                marker_color='#1f77b4',
                hovertemplate="<b>%{x}</b><br>" +
                             "Nombre de villes: %{y}<br>" +
                             "%{customdata}<extra></extra>",
                customdata=[format_ville_list([v for v in villes_college_only 
                           if filtered_df[filtered_df['com_name_upper'] == v]['libelle_departement_eleve'].iloc[0] == dept])
                           for dept in villes_missing_lycees.keys()]
            )
        ])
        fig1.update_layout(
            title={
            'text': "Villes manquantes dans la carte des lyc√©es", 
            'font': {'size': 18, 'color': colors['text']}
            },
            xaxis={
                'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}, 
                'tickangle': 45
            },
            yaxis={
                'title': {'text': "Nombre de villes", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}
            },
            height=400,
            showlegend=False,
            paper_bgcolor=colors['background'],
            plot_bgcolor=colors['background'],
            font={'color': colors['text']},
            hoverlabel=dict(
                bgcolor=colors['text'],
                font_size=14,
                font_family="Arial"
            )
        )
        
        st.plotly_chart(fig1, use_container_width=True)

        # Graphique 3: Villes manquantes dans la carte des coll√®ges
        fig3 = go.Figure(data=[
            go.Bar(
                x=list(villes_missing_colleges.keys()),
                y=list(villes_missing_colleges.values()),
                marker_color='#2ca02c',
                hovertemplate="<b>%{x}</b><br>" +
                             "Nombre de villes: %{y}<br>" +
                             "%{customdata}<extra></extra>",
                customdata=[format_ville_list([v for v in villes_lycee_only 
                           if filtered_df[filtered_df['com_name_upper'] == v]['libelle_departement_eleve'].iloc[0] == dept])
                           for dept in villes_missing_colleges.keys()]
            )
        ])
        fig3.update_layout(
            title={
            'text': "Villes manquantes dans la carte des coll√®ges", 
            'font': {'size': 18, 'color': colors['text']}
            },
            xaxis={
                'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}, 
                'tickangle': 45
            },
            yaxis={
                'title': {'text': "Nombre de villes", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}
            },
            height=400,
            showlegend=False,
            paper_bgcolor=colors['background'],
            plot_bgcolor=colors['background'],
            font={'color': colors['text']},
            hoverlabel=dict(
                bgcolor=colors['text'],
                font_size=14,
                font_family="Arial"
            )
        )
        st.plotly_chart(fig3, use_container_width=True)


    with col2:
        # Graphique 2: Adresses manquantes dans la carte des lyc√©es
        fig2 = go.Figure(data=[
            go.Bar(
                x=list(addr_missing_lycees.keys()),
                y=list(addr_missing_lycees.values()),
                marker_color='#ff7f0e',
                hovertemplate="<b>%{x}</b><br>" +
                             "Nombre d'adresses: %{y}<br>" +
                             "%{customdata}<extra></extra>",
                customdata=[format_ville_list([v[0] for v in adressevilles_college_only 
                           if filtered_df[filtered_df['com_name_upper'] == v[0]]['libelle_departement_eleve'].iloc[0] == dept])
                           for dept in addr_missing_lycees.keys()]
            )
        ])
        fig2.update_layout(
            title={
            'text': "Adresses manquantes dans la carte des lyc√©es", 
            'font': {'size': 18, 'color': colors['text']}
            },
            xaxis={
                'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}, 
                'tickangle': 45
            },
            yaxis={
                'title': {'text': "Nombre d'adresses", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}
            },
            height=400,
            showlegend=False,
            paper_bgcolor=colors['background'],
            plot_bgcolor=colors['background'],
            font={'color': colors['text']},
            hoverlabel=dict(
                bgcolor=colors['text'],
                font_size=14,
                font_family="Arial"
            )
        )
        st.plotly_chart(fig2, use_container_width=True)

        # Graphique 4: Adresses manquantes dans la carte des coll√®ges
        fig4 = go.Figure(data=[
            go.Bar(
                x=list(addr_missing_colleges.keys()),
                y=list(addr_missing_colleges.values()),
                marker_color='#d62728',
                hovertemplate="<b>%{x}</b><br>" +
                             "Nombre d'adresses: %{y}<br>" +
                             "%{customdata}<extra></extra>",
                customdata=[format_ville_list([v[0] for v in adressevilles_lycee_only 
                           if filtered_df[filtered_df['com_name_upper'] == v[0]]['libelle_departement_eleve'].iloc[0] == dept])
                           for dept in addr_missing_colleges.keys()]
            )
        ])
        fig4.update_layout(
            title={
                'text': "Adresses manquantes dans la carte des coll√®ges", 
                'font': {'size': 18, 'color': colors['text']}
            },
            xaxis={
                'title': {'text': "D√©partement", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}, 
                'tickangle': 45
            },
            yaxis={
                'title': {'text': "Nombre d'adresses", 'font': {'size': 18, 'color': colors['text']}},
                'tickfont': {'size': 12, 'color': colors['text']}
            },
            height=400,
            showlegend=False,
            paper_bgcolor=colors['background'],
            plot_bgcolor=colors['background'],
            font={'color': colors['text']},
            hoverlabel=dict(
                bgcolor=colors['text'],
                font_size=14,
                font_family="Arial"
            )
        )
        st.plotly_chart(fig4, use_container_width=True)

def perimetre_page():
    st.title("P√©rim√®tre de recrutement de l'√©tablissement")
    st.write("√Ä venir...")

def main():
    if st.session_state.get('page') == 'about':
        about_page()
    elif st.session_state.get('page') == 'perimetre':
        perimetre_page()
    elif st.session_state.get('page') == 'stats':
        stats_page()
    elif st.session_state.get('page') == 'legal':
        legal_page()
    else:
        search_page()

with st.sidebar:
    if st.button("Trouver mon √©tablissement de secteur"):
        st.session_state['page'] = 'search'
    if st.button("P√©rim√®tre de recrutement d'√©tablissement"):
        st.session_state['page'] = 'perimetre'
    if st.button("Statistiques sur la carte scolaire"):
        st.session_state['page'] = 'stats'
    if st.button("√Ä propos"):
        st.session_state['page'] = 'about'
    if st.button("Mentions l√©gales"):
        st.session_state['page'] = 'legal'

if __name__ == "__main__":
    if 'page' not in st.session_state:
        st.session_state['page'] = 'search'
    main()